App.KL.Game.Creature.Status.slow.add(
  creature: App.KL.Game.Creature
  duration: I32
  amount: I32
): App.KL.Game.Creature
  
  let slow_added = App.KL.Game.Creature.Status.slow.add.aux(duration, amount, creature@status)
  creature@status <- slow_added

App.KL.Game.Creature.Status.slow.add.aux(
  duration: I32
  amount: I32
  status: List<App.KL.Game.Creature.Status>
): List<App.KL.Game.Creature.Status>

  let new_slow = App.KL.Game.Creature.Status.slow(duration, amount)
  case status { 
    nil:
      new_slow & status
    cons:
      case status.head { 
        slow: 
          let old_duration = status.head.duration
          let next_slow = I32.cmp(old_duration, duration)
          case next_slow {
            gtn: 
              new_slow & status.tail
          }default status.head & App.KL.Game.Creature.Status.slow.add.aux(duration, amount, status.tail)
      }default status.head & App.KL.Game.Creature.Status.slow.add.aux(duration, amount, status.tail)
  }
